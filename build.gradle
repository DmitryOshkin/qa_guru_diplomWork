plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.9.6"
    id "io.freefair.lombok" version "6.0.0-m2"
}

group 'qa.guru.allure'
version '1.0-SNAPSHOT'

def restAssured = "4.5.1",
    junitVersion = "5.8.2",
    slf4jVersion = "1.7.36",
    selenideVersion = "6.4.0",
    allureVersion = "2.17.3",
    appiumVersion = "8.0.0",
    ownerVersion = "1.0.12"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        autoconfigure.set(true)
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    //Selenide
    testImplementation("com.codeborne:selenide:$selenideVersion")

    //slf4j
    testRuntimeOnly("org.slf4j:slf4j-simple:$slf4jVersion")

    //JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

    //restAssured
    testImplementation(
            "io.rest-assured:rest-assured:$restAssured",
            "io.rest-assured:json-schema-validator:$restAssured")

    //allure
    testImplementation(
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion")

    //owner
    testImplementation(
            "org.aeonbits.owner:owner:$ownerVersion",
            "commons-io:commons-io:2.11.0")

    //appium
    testImplementation("io.appium:java-client:$appiumVersion")

    //random Faker
    testImplementation("com.github.javafaker:javafaker:1.0.2")

    //jackson
    testImplementation("com.fasterxml.jackson.core:jackson-databind:2.13.2.2")

    //assertj
    testImplementation("org.assertj:assertj-core:3.22.0")
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task test_randomValues(type: Test) {
    useJUnitPlatform {
        includeTags "randomValues"
    }
}

task test_exactValues(type: Test) {
    useJUnitPlatform {
        includeTags "exactValues"
    }
}

task selenide_android_test(type: Test) {
    useJUnitPlatform {
        includeTags "selenide"
    }
}
